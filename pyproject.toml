[project]
name = "feluda"
version = "0.9.4"
description = "A configurable engine for analysing multi-lingual and multi-modal content."
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE.md" }
authors = [
    { name = "Tattle", email = "info@tattle.co.in" }
]
maintainers = [
    { name = "Tattle", email = "info@tattle.co.in" }
]
keywords = [
    "multilingual",
    "multimodal",
    "indian-languages",
    "search",
    "deep-learning",
    "formal-verification",
    "contract-programming",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "boto3==1.37.30",
    "dacite==1.9.2",
    "pydub==0.25.1",
    "pyyaml==6.0.2",
    "requests==2.32.3",
    "werkzeug==3.1.3",
    "wget==3.2",
    "pillow==11.1.0",
    "numpy==1.26.4",
    "pydantic==2.7.1",
    "deal==4.24.3",
    "structlog==24.1.0",
    "opentelemetry-api==1.23.0",
    "opentelemetry-sdk==1.23.0",
]

[project.optional-dependencies]
dev = [
    "tomlkit==0.13.2",
    "ruff==0.3.3",
    "pre-commit==4.2.0",
    "jupyter==1.1.1",
    "notebook==7.3.3",
    "pytest==8.0.2",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "hypothesis==6.98.0",
    "mypy==1.8.0",
    "black==24.2.0",
    "isort==5.13.2",
    "mutmut==2.4.4",
    "mypyc==1.8.0",
    "sphinx==7.2.6",
    "sphinx-rtd-theme==2.0.0",
    "sphinx-autodoc-typehints==2.0.0",
    "pip-tools==7.4.0",
    "crosshair-tool==0.0.51",
]

security = [
    "bandit==1.7.7",
    "safety==2.3.5",
    "pip-audit==2.7.2",
]

performance = [
    "numba==0.59.1",
    "py-spy==0.3.14",
    "memray==1.11.0",
    "pyinstrument==4.6.2",
]

ml = [
    "scikit-learn==1.4.1.post1",
    "torch==2.2.1",
    "torchvision==0.17.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.semantic_release]
version_variable = ["pyproject.toml:project.version"]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false
tag_format = "{name}-{version}"

[tool.hatch]
version = "1.0.0"

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=feluda --cov=operators {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:feluda operators}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.envs.docs]
dependencies = [
  "sphinx",
  "sphinx-rtd-theme",
  "sphinx-autodoc-typehints",
]
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build"
serve = "python -m http.server --directory docs/build"

[tool.hatch.build.targets.wheel]
packages = ["feluda"]

[tool.hatch.build.targets.sdist]
include = [
  "/feluda",
  "/tests",
  "/docs",
]

[tool.uv.workspace]
members = [
    "operators/classify_video_zero_shot",
    "operators/cluster_embeddings",
    "operators/detect_lewd_images",
    "operators/detect_text_in_image_tesseract",
    "operators/dimension_reduction",
    "operators/image_vec_rep_resnet",
    "operators/vid_vec_rep_clip",
    "operators/video_hash_tmk",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle
    "N",  # flake8-naming
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "A",  # flake8-builtins
]
ignore = [
    "ANN101",  # Missing type annotation for `self` in method
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
]
exclude = ["src", "dist", ".docker", ".pytest_cache", ".ruff_cache", ".venv", "venv", "docs/conf.py"]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "ANN", "D"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning:pkg_resources",
]

[tool.coverage.run]
source = ["feluda", "operators"]
omit = ["tests/*", "docs/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
