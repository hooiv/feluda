name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write # For trusted publishing

jobs:
  verify:
    name: Verify Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      - name: Verify version matches pyproject.toml
        run: |
          PYPROJECT_VERSION=$(grep -m 1 'version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          if [ "${{ steps.get-version.outputs.version }}" != "$PYPROJECT_VERSION" ]; then
            echo "Tag version (${{ steps.get-version.outputs.version }}) does not match pyproject.toml version ($PYPROJECT_VERSION)"
            exit 1
          fi

  test:
    name: Run Tests
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install -e ".[dev]"
      - name: Run tests
        run: |
          pytest

  security-scan:
    name: Security Scan
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv pip install -e ".[dev,security]"
      - name: Run security checks
        run: |
          bandit -r feluda/
          safety check
          pip-audit

  build:
    name: Build Package
    needs: [verify, test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: |
          python -m build
      - name: Store built package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  generate-sbom:
    name: Generate SBOM
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom
      - name: Generate SBOM
        run: |
          cyclonedx-py -r -o sbom.json .
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json

  sign-artifacts:
    name: Sign Artifacts
    needs: [build, generate-sbom]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom
          path: .
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.1.1
      - name: Sign artifacts with Keyless
        run: |
          for file in dist/*; do
            cosign sign-blob --yes $file > ${file}.sig
          done
          cosign sign-blob --yes sbom.json > sbom.json.sig
      - name: Upload signed artifacts
        uses: actions/upload-artifact@v3
        with:
          name: signed-artifacts
          path: |
            dist/
            sbom.json
            sbom.json.sig

  publish-pypi:
    name: Publish to PyPI
    needs: [verify, sign-artifacts]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write # For trusted publishing
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          skip-existing: true

  publish-github-release:
    name: Publish GitHub Release
    needs: [verify, sign-artifacts, publish-pypi]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download signed artifacts
        uses: actions/download-artifact@v3
        with:
          name: signed-artifacts
          path: signed-artifacts
      - name: Generate release notes
        id: release-notes
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s (%h)" > RELEASE_NOTES.md
          else
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD > RELEASE_NOTES.md
          fi
          echo "::set-output name=notes::$(cat RELEASE_NOTES.md)"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.verify.outputs.version }}
          body_path: RELEASE_NOTES.md
          files: |
            signed-artifacts/dist/*
            signed-artifacts/sbom.json
            signed-artifacts/sbom.json.sig
          draft: false
          prerelease: false

  notify:
    name: Notify
    needs: [publish-pypi, publish-github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: |
          echo "Release v${{ needs.verify.outputs.version }} completed successfully"
          # Add notification logic here (e.g., Slack, email)

  monitor-rollback:
    name: Monitor for Rollback
    needs: [publish-pypi, publish-github-release]
    runs-on: ubuntu-latest
    steps:
      - name: Set up monitoring
        run: |
          echo "Setting up release monitoring"
          # Add monitoring logic here
          # This would typically involve setting up alerts or checks
          # that would trigger a rollback if issues are detected
